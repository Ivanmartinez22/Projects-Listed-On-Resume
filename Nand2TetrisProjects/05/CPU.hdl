// File: CPU.hdl
// Author: Ivan Martinez
// Date: 10/25/2021
// Section: 505 
// E-mail: ivanattexas@tamu.edu 
// Description:
// The content of this file implements a CPU chip


// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // instruction[0] is a or c instruction determination
    //if instruction[0] == 0 then a instruction
    //if instruction[1] == 1 then c instruction
    Not(in = instruction[15], out = selection);
    Mux16(a = ALUout, b = instruction, sel = selection, out = muxleft); // first mux
    Or(a=instruction[5],b = selection, out=load1);
    //A Register 
    ARegister(in = muxleft, load = load1, out = arout, out[0..14] = addressM);
    Mux16(a = arout, b = inM, sel = instruction[12], out = muxright); // second mux 
    //D Register and control
    And(a = instruction[4], b = instruction[15], out = load2);
    DRegister(in = ALUout, load = load2, out = dout);
    //ALU 
    ALU(x = dout, y = muxright, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, zr = zrOut, ng = ngOut, out = outM);// zr and ng are control lines
    //WriteM control
    And(a = instruction[3], b = instruction[15], out = writeM);
    //Jump logic 
    And(a=instruction[0],b=instruction[15],out=valid);
    And(a=instruction[1],b=instruction[15],out=valid2);
    And(a=instruction[2],b=instruction[15],out=valid3);
    Not(in = zrOut, out = notzero);
    Not(in = ngOut, out = greaterthanzero);
    And(a=notzero, b=greaterthanzero, out=check1);
    And(a = check1, b = valid, out = jgt);
    And(a = valid2, b = zrOut, out = jeq);
    And(a = valid3, b = notzero, out = check2);
    And(a = check2, b = ngOut, out = jlt);
    And(a = valid, b = valid2, out = check3);
    Or(a = greaterthanzero, b = zrOut, out = check4);
    And(a = check3, b = check4, out = jge);
    And(a = valid, b = valid3, out = check5);
    And(a = check5,b = notzero, out = jne);
    And(a = valid3, b = valid2, out = check6);
    Or(a = zrOut, b = ngOut, out = check7);
    And(a = check7, b = check6, out = jle);
    And(a = valid, b = valid2, out = check8);
    And(a = valid3, b = check8, out = jmp);
    Or(a = jgt, b = jeq, out = or1);
    Or(a = or1, b = jlt, out = or2);
    Or(a = jge, b = or2, out = or3);
    Or(a = jne, b = or3, out = or4);
    Or(a = or4, b = jle, out = or5);
    Or(a = jmp, b = or5, out = load3);
    PC(in = arout, load = load3, inc = true, reset = reset, out[0..14] = pc);


}
